// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_test_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_test_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_List;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_test_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sub;
}  // namespace protobuf_test_2eproto
namespace pbf {
namespace internal {
namespace test {
class SubDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sub>
      _instance;
} _Sub_default_instance_;
class ListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<List>
      _instance;
} _List_default_instance_;
class TestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Test>
      _instance;
} _Test_default_instance_;
}  // namespace test
}  // namespace internal
}  // namespace pbf
namespace protobuf_test_2eproto {
static void InitDefaultsSub() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbf::internal::test::_Sub_default_instance_;
    new (ptr) ::pbf::internal::test::Sub();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbf::internal::test::Sub::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Sub =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSub}, {}};

static void InitDefaultsList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbf::internal::test::_List_default_instance_;
    new (ptr) ::pbf::internal::test::List();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbf::internal::test::List::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_List =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsList}, {}};

static void InitDefaultsTest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbf::internal::test::_Test_default_instance_;
    new (ptr) ::pbf::internal::test::Test();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbf::internal::test::Test::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Test =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTest}, {
      &protobuf_test_2eproto::scc_info_Sub.base,
      &protobuf_test_2eproto::scc_info_List.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Sub.base);
  ::google::protobuf::internal::InitSCC(&scc_info_List.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Test.base);
}

}  // namespace protobuf_test_2eproto
namespace pbf {
namespace internal {
namespace test {

// ===================================================================

void Sub::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sub::kXFieldNumber;
const int Sub::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sub::Sub()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_test_2eproto::scc_info_Sub.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbf.internal.test.Sub)
}
Sub::Sub(const Sub& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:pbf.internal.test.Sub)
}

void Sub::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Sub::~Sub() {
  // @@protoc_insertion_point(destructor:pbf.internal.test.Sub)
  SharedDtor();
}

void Sub::SharedDtor() {
}

void Sub::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sub& Sub::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_test_2eproto::scc_info_Sub.base);
  return *internal_default_instance();
}


void Sub::Clear() {
// @@protoc_insertion_point(message_clear_start:pbf.internal.test.Sub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Sub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pbf.internal.test.Sub)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbf.internal.test.Sub)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbf.internal.test.Sub)
  return false;
#undef DO_
}

void Sub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbf.internal.test.Sub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pbf.internal.test.Sub)
}

size_t Sub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbf.internal.test.Sub)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // int64 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sub::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Sub*>(&from));
}

void Sub::MergeFrom(const Sub& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbf.internal.test.Sub)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Sub::CopyFrom(const Sub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbf.internal.test.Sub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sub::IsInitialized() const {
  return true;
}

void Sub::Swap(Sub* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sub::InternalSwap(Sub* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Sub::GetTypeName() const {
  return "pbf.internal.test.Sub";
}


// ===================================================================

void List::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int List::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

List::List()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_test_2eproto::scc_info_List.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbf.internal.test.List)
}
List::List(const List& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      z_(from.z_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbf.internal.test.List)
}

void List::SharedCtor() {
}

List::~List() {
  // @@protoc_insertion_point(destructor:pbf.internal.test.List)
  SharedDtor();
}

void List::SharedDtor() {
}

void List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const List& List::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_test_2eproto::scc_info_List.base);
  return *internal_default_instance();
}


void List::Clear() {
// @@protoc_insertion_point(message_clear_start:pbf.internal.test.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  z_.Clear();
  _internal_metadata_.Clear();
}

bool List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pbf.internal.test.List)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 z = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_z())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 10u, input, this->mutable_z())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbf.internal.test.List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbf.internal.test.List)
  return false;
#undef DO_
}

void List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbf.internal.test.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 z = 1;
  if (this->z_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _z_cached_byte_size_));
  }
  for (int i = 0, n = this->z_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->z(i), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pbf.internal.test.List)
}

size_t List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbf.internal.test.List)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated sint32 z = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->z_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _z_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void List::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const List*>(&from));
}

void List::MergeFrom(const List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbf.internal.test.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  z_.MergeFrom(from.z_);
}

void List::CopyFrom(const List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbf.internal.test.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool List::IsInitialized() const {
  return true;
}

void List::Swap(List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void List::InternalSwap(List* other) {
  using std::swap;
  z_.InternalSwap(&other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string List::GetTypeName() const {
  return "pbf.internal.test.List";
}


// ===================================================================

void Test::InitAsDefaultInstance() {
  ::pbf::internal::test::_Test_default_instance_._instance.get_mutable()->n_ = const_cast< ::pbf::internal::test::Sub*>(
      ::pbf::internal::test::Sub::internal_default_instance());
  ::pbf::internal::test::_Test_default_instance_._instance.get_mutable()->o_ = const_cast< ::pbf::internal::test::List*>(
      ::pbf::internal::test::List::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Test::kAFieldNumber;
const int Test::kBFieldNumber;
const int Test::kCFieldNumber;
const int Test::kDFieldNumber;
const int Test::kEFieldNumber;
const int Test::kFFieldNumber;
const int Test::kGFieldNumber;
const int Test::kHFieldNumber;
const int Test::kIFieldNumber;
const int Test::kJFieldNumber;
const int Test::kKFieldNumber;
const int Test::kLFieldNumber;
const int Test::kMFieldNumber;
const int Test::kNFieldNumber;
const int Test::kOFieldNumber;
const int Test::kPFieldNumber;
const int Test::kQFieldNumber;
const int Test::kRFieldNumber;
const int Test::kSFieldNumber;
const int Test::kTFieldNumber;
const int Test::kUFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Test::Test()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_test_2eproto::scc_info_Test.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbf.internal.test.Test)
}
Test::Test(const Test& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      m_(from.m_),
      p_(from.p_),
      q_(from.q_),
      t_(from.t_),
      u_(from.u_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  k_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.k().size() > 0) {
    k_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k_);
  }
  l_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.l().size() > 0) {
    l_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.l_);
  }
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.s().size() > 0) {
    s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  if (from.has_n()) {
    n_ = new ::pbf::internal::test::Sub(*from.n_);
  } else {
    n_ = NULL;
  }
  if (from.has_o()) {
    o_ = new ::pbf::internal::test::List(*from.o_);
  } else {
    o_ = NULL;
  }
  ::memcpy(&b_, &from.b_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&b_)) + sizeof(r_));
  // @@protoc_insertion_point(copy_constructor:pbf.internal.test.Test)
}

void Test::SharedCtor() {
  k_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  l_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&n_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&n_)) + sizeof(r_));
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:pbf.internal.test.Test)
  SharedDtor();
}

void Test::SharedDtor() {
  k_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  l_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete n_;
  if (this != internal_default_instance()) delete o_;
}

void Test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Test& Test::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_test_2eproto::scc_info_Test.base);
  return *internal_default_instance();
}


void Test::Clear() {
// @@protoc_insertion_point(message_clear_start:pbf.internal.test.Test)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_.Clear();
  p_.Clear();
  q_.Clear();
  t_.Clear();
  u_.Clear();
  k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  l_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && n_ != NULL) {
    delete n_;
  }
  n_ = NULL;
  if (GetArenaNoVirtual() == NULL && o_ != NULL) {
    delete o_;
  }
  o_ = NULL;
  ::memset(&b_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&b_)) + sizeof(r_));
  _internal_metadata_.Clear();
}

bool Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:pbf.internal.test.Test)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 c = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 d = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 e = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 f = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &f_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 g = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 h = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float i = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double j = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &j_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes k = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_k()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string l = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_l()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->l().data(), static_cast<int>(this->l().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pbf.internal.test.Test.l"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 m = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_m())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 106u, input, this->mutable_m())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pbf.internal.test.Sub n = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_n()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pbf.internal.test.List o = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_o()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 p = 16 [packed = false];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 128u, input, this->mutable_p())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_p())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pbf.internal.test.Sub q = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_q()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 r = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes s = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 162u, input, this->mutable_t())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double u = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_u())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 170u, input, this->mutable_u())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbf.internal.test.Test)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbf.internal.test.Test)
  return false;
#undef DO_
}

void Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbf.internal.test.Test)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 a = 1;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->a(), output);
  }

  // uint64 b = 2;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->b(), output);
  }

  // int32 c = 3;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->c(), output);
  }

  // int64 d = 4;
  if (this->d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->d(), output);
  }

  // sint32 e = 5;
  if (this->e() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->e(), output);
  }

  // sint64 f = 6;
  if (this->f() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->f(), output);
  }

  // fixed32 g = 7;
  if (this->g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->g(), output);
  }

  // fixed64 h = 8;
  if (this->h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->h(), output);
  }

  // float i = 9;
  if (this->i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->i(), output);
  }

  // double j = 10;
  if (this->j() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->j(), output);
  }

  // bytes k = 11;
  if (this->k().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->k(), output);
  }

  // string l = 12;
  if (this->l().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->l().data(), static_cast<int>(this->l().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pbf.internal.test.Test.l");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->l(), output);
  }

  // repeated uint64 m = 13;
  if (this->m_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _m_cached_byte_size_));
  }
  for (int i = 0, n = this->m_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->m(i), output);
  }

  // .pbf.internal.test.Sub n = 14;
  if (this->has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->_internal_n(), output);
  }

  // .pbf.internal.test.List o = 15;
  if (this->has_o()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->_internal_o(), output);
  }

  // repeated sint32 p = 16 [packed = false];
  for (int i = 0, n = this->p_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      16, this->p(i), output);
  }

  // repeated .pbf.internal.test.Sub q = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->q_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17,
      this->q(static_cast<int>(i)),
      output);
  }

  // uint32 r = 18;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->r(), output);
  }

  // bytes s = 19;
  if (this->s().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->s(), output);
  }

  // repeated float t = 20;
  if (this->t_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(20, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _t_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->t().data(), this->t_size(), output);
  }

  // repeated double u = 21;
  if (this->u_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(21, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _u_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->u().data(), this->u_size(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:pbf.internal.test.Test)
}

size_t Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbf.internal.test.Test)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated uint64 m = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->m_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _m_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint32 p = 16 [packed = false];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->p_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->p_size());
    total_size += data_size;
  }

  // repeated .pbf.internal.test.Sub q = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->q_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->q(static_cast<int>(i)));
    }
  }

  // repeated float t = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->t_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _t_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double u = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->u_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _u_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes k = 11;
  if (this->k().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->k());
  }

  // string l = 12;
  if (this->l().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->l());
  }

  // bytes s = 19;
  if (this->s().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->s());
  }

  // .pbf.internal.test.Sub n = 14;
  if (this->has_n()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *n_);
  }

  // .pbf.internal.test.List o = 15;
  if (this->has_o()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *o_);
  }

  // uint64 b = 2;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->b());
  }

  // uint32 a = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->a());
  }

  // int32 c = 3;
  if (this->c() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->c());
  }

  // int64 d = 4;
  if (this->d() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->d());
  }

  // sint64 f = 6;
  if (this->f() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->f());
  }

  // sint32 e = 5;
  if (this->e() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->e());
  }

  // fixed32 g = 7;
  if (this->g() != 0) {
    total_size += 1 + 4;
  }

  // fixed64 h = 8;
  if (this->h() != 0) {
    total_size += 1 + 8;
  }

  // double j = 10;
  if (this->j() != 0) {
    total_size += 1 + 8;
  }

  // float i = 9;
  if (this->i() != 0) {
    total_size += 1 + 4;
  }

  // uint32 r = 18;
  if (this->r() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->r());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Test::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Test*>(&from));
}

void Test::MergeFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbf.internal.test.Test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_.MergeFrom(from.m_);
  p_.MergeFrom(from.p_);
  q_.MergeFrom(from.q_);
  t_.MergeFrom(from.t_);
  u_.MergeFrom(from.u_);
  if (from.k().size() > 0) {

    k_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k_);
  }
  if (from.l().size() > 0) {

    l_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.l_);
  }
  if (from.s().size() > 0) {

    s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  if (from.has_n()) {
    mutable_n()->::pbf::internal::test::Sub::MergeFrom(from.n());
  }
  if (from.has_o()) {
    mutable_o()->::pbf::internal::test::List::MergeFrom(from.o());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.c() != 0) {
    set_c(from.c());
  }
  if (from.d() != 0) {
    set_d(from.d());
  }
  if (from.f() != 0) {
    set_f(from.f());
  }
  if (from.e() != 0) {
    set_e(from.e());
  }
  if (from.g() != 0) {
    set_g(from.g());
  }
  if (from.h() != 0) {
    set_h(from.h());
  }
  if (from.j() != 0) {
    set_j(from.j());
  }
  if (from.i() != 0) {
    set_i(from.i());
  }
  if (from.r() != 0) {
    set_r(from.r());
  }
}

void Test::CopyFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbf.internal.test.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  return true;
}

void Test::Swap(Test* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Test::InternalSwap(Test* other) {
  using std::swap;
  m_.InternalSwap(&other->m_);
  p_.InternalSwap(&other->p_);
  CastToBase(&q_)->InternalSwap(CastToBase(&other->q_));
  t_.InternalSwap(&other->t_);
  u_.InternalSwap(&other->u_);
  k_.Swap(&other->k_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  l_.Swap(&other->l_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  s_.Swap(&other->s_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(n_, other->n_);
  swap(o_, other->o_);
  swap(b_, other->b_);
  swap(a_, other->a_);
  swap(c_, other->c_);
  swap(d_, other->d_);
  swap(f_, other->f_);
  swap(e_, other->e_);
  swap(g_, other->g_);
  swap(h_, other->h_);
  swap(j_, other->j_);
  swap(i_, other->i_);
  swap(r_, other->r_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Test::GetTypeName() const {
  return "pbf.internal.test.Test";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace test
}  // namespace internal
}  // namespace pbf
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pbf::internal::test::Sub* Arena::CreateMaybeMessage< ::pbf::internal::test::Sub >(Arena* arena) {
  return Arena::CreateInternal< ::pbf::internal::test::Sub >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pbf::internal::test::List* Arena::CreateMaybeMessage< ::pbf::internal::test::List >(Arena* arena) {
  return Arena::CreateInternal< ::pbf::internal::test::List >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pbf::internal::test::Test* Arena::CreateMaybeMessage< ::pbf::internal::test::Test >(Arena* arena) {
  return Arena::CreateInternal< ::pbf::internal::test::Test >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
