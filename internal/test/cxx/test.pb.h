// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_INCLUDED_test_2eproto
#define PROTOBUF_INCLUDED_test_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_test_2eproto 

namespace protobuf_test_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_test_2eproto
namespace pbf {
namespace internal {
namespace test {
class List;
class ListDefaultTypeInternal;
extern ListDefaultTypeInternal _List_default_instance_;
class Sub;
class SubDefaultTypeInternal;
extern SubDefaultTypeInternal _Sub_default_instance_;
class Test;
class TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
}  // namespace test
}  // namespace internal
}  // namespace pbf
namespace google {
namespace protobuf {
template<> ::pbf::internal::test::List* Arena::CreateMaybeMessage<::pbf::internal::test::List>(Arena*);
template<> ::pbf::internal::test::Sub* Arena::CreateMaybeMessage<::pbf::internal::test::Sub>(Arena*);
template<> ::pbf::internal::test::Test* Arena::CreateMaybeMessage<::pbf::internal::test::Test>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pbf {
namespace internal {
namespace test {

// ===================================================================

class Sub : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pbf.internal.test.Sub) */ {
 public:
  Sub();
  virtual ~Sub();

  Sub(const Sub& from);

  inline Sub& operator=(const Sub& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sub(Sub&& from) noexcept
    : Sub() {
    *this = ::std::move(from);
  }

  inline Sub& operator=(Sub&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Sub& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sub* internal_default_instance() {
    return reinterpret_cast<const Sub*>(
               &_Sub_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Sub* other);
  friend void swap(Sub& a, Sub& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sub* New() const final {
    return CreateMaybeMessage<Sub>(NULL);
  }

  Sub* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sub>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Sub& from);
  void MergeFrom(const Sub& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Sub* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int64 x() const;
  void set_x(::google::protobuf::int64 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbf.internal.test.Sub)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 x_;
  ::google::protobuf::int32 y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class List : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pbf.internal.test.List) */ {
 public:
  List();
  virtual ~List();

  List(const List& from);

  inline List& operator=(const List& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  List(List&& from) noexcept
    : List() {
    *this = ::std::move(from);
  }

  inline List& operator=(List&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const List& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const List* internal_default_instance() {
    return reinterpret_cast<const List*>(
               &_List_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(List* other);
  friend void swap(List& a, List& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline List* New() const final {
    return CreateMaybeMessage<List>(NULL);
  }

  List* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<List>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const List& from);
  void MergeFrom(const List& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(List* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint32 z = 1;
  int z_size() const;
  void clear_z();
  static const int kZFieldNumber = 1;
  ::google::protobuf::int32 z(int index) const;
  void set_z(int index, ::google::protobuf::int32 value);
  void add_z(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      z() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_z();

  // @@protoc_insertion_point(class_scope:pbf.internal.test.List)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > z_;
  mutable int _z_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Test : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pbf.internal.test.Test) */ {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test(Test&& from) noexcept
    : Test() {
    *this = ::std::move(from);
  }

  inline Test& operator=(Test&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test* internal_default_instance() {
    return reinterpret_cast<const Test*>(
               &_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Test* other);
  friend void swap(Test& a, Test& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test* New() const final {
    return CreateMaybeMessage<Test>(NULL);
  }

  Test* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Test>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Test* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 m = 13;
  int m_size() const;
  void clear_m();
  static const int kMFieldNumber = 13;
  ::google::protobuf::uint64 m(int index) const;
  void set_m(int index, ::google::protobuf::uint64 value);
  void add_m(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      m() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_m();

  // repeated sint32 p = 16 [packed = false];
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 16;
  ::google::protobuf::int32 p(int index) const;
  void set_p(int index, ::google::protobuf::int32 value);
  void add_p(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      p() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_p();

  // repeated .pbf.internal.test.Sub q = 17;
  int q_size() const;
  void clear_q();
  static const int kQFieldNumber = 17;
  ::pbf::internal::test::Sub* mutable_q(int index);
  ::google::protobuf::RepeatedPtrField< ::pbf::internal::test::Sub >*
      mutable_q();
  const ::pbf::internal::test::Sub& q(int index) const;
  ::pbf::internal::test::Sub* add_q();
  const ::google::protobuf::RepeatedPtrField< ::pbf::internal::test::Sub >&
      q() const;

  // repeated float t = 20;
  int t_size() const;
  void clear_t();
  static const int kTFieldNumber = 20;
  float t(int index) const;
  void set_t(int index, float value);
  void add_t(float value);
  const ::google::protobuf::RepeatedField< float >&
      t() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_t();

  // repeated double u = 21;
  int u_size() const;
  void clear_u();
  static const int kUFieldNumber = 21;
  double u(int index) const;
  void set_u(int index, double value);
  void add_u(double value);
  const ::google::protobuf::RepeatedField< double >&
      u() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_u();

  // bytes k = 11;
  void clear_k();
  static const int kKFieldNumber = 11;
  const ::std::string& k() const;
  void set_k(const ::std::string& value);
  #if LANG_CXX11
  void set_k(::std::string&& value);
  #endif
  void set_k(const char* value);
  void set_k(const void* value, size_t size);
  ::std::string* mutable_k();
  ::std::string* release_k();
  void set_allocated_k(::std::string* k);

  // string l = 12;
  void clear_l();
  static const int kLFieldNumber = 12;
  const ::std::string& l() const;
  void set_l(const ::std::string& value);
  #if LANG_CXX11
  void set_l(::std::string&& value);
  #endif
  void set_l(const char* value);
  void set_l(const char* value, size_t size);
  ::std::string* mutable_l();
  ::std::string* release_l();
  void set_allocated_l(::std::string* l);

  // bytes s = 19;
  void clear_s();
  static const int kSFieldNumber = 19;
  const ::std::string& s() const;
  void set_s(const ::std::string& value);
  #if LANG_CXX11
  void set_s(::std::string&& value);
  #endif
  void set_s(const char* value);
  void set_s(const void* value, size_t size);
  ::std::string* mutable_s();
  ::std::string* release_s();
  void set_allocated_s(::std::string* s);

  // .pbf.internal.test.Sub n = 14;
  bool has_n() const;
  void clear_n();
  static const int kNFieldNumber = 14;
  private:
  const ::pbf::internal::test::Sub& _internal_n() const;
  public:
  const ::pbf::internal::test::Sub& n() const;
  ::pbf::internal::test::Sub* release_n();
  ::pbf::internal::test::Sub* mutable_n();
  void set_allocated_n(::pbf::internal::test::Sub* n);

  // .pbf.internal.test.List o = 15;
  bool has_o() const;
  void clear_o();
  static const int kOFieldNumber = 15;
  private:
  const ::pbf::internal::test::List& _internal_o() const;
  public:
  const ::pbf::internal::test::List& o() const;
  ::pbf::internal::test::List* release_o();
  ::pbf::internal::test::List* mutable_o();
  void set_allocated_o(::pbf::internal::test::List* o);

  // uint64 b = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::uint64 b() const;
  void set_b(::google::protobuf::uint64 value);

  // uint32 a = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::uint32 a() const;
  void set_a(::google::protobuf::uint32 value);

  // int32 c = 3;
  void clear_c();
  static const int kCFieldNumber = 3;
  ::google::protobuf::int32 c() const;
  void set_c(::google::protobuf::int32 value);

  // int64 d = 4;
  void clear_d();
  static const int kDFieldNumber = 4;
  ::google::protobuf::int64 d() const;
  void set_d(::google::protobuf::int64 value);

  // sint64 f = 6;
  void clear_f();
  static const int kFFieldNumber = 6;
  ::google::protobuf::int64 f() const;
  void set_f(::google::protobuf::int64 value);

  // sint32 e = 5;
  void clear_e();
  static const int kEFieldNumber = 5;
  ::google::protobuf::int32 e() const;
  void set_e(::google::protobuf::int32 value);

  // fixed32 g = 7;
  void clear_g();
  static const int kGFieldNumber = 7;
  ::google::protobuf::uint32 g() const;
  void set_g(::google::protobuf::uint32 value);

  // fixed64 h = 8;
  void clear_h();
  static const int kHFieldNumber = 8;
  ::google::protobuf::uint64 h() const;
  void set_h(::google::protobuf::uint64 value);

  // double j = 10;
  void clear_j();
  static const int kJFieldNumber = 10;
  double j() const;
  void set_j(double value);

  // float i = 9;
  void clear_i();
  static const int kIFieldNumber = 9;
  float i() const;
  void set_i(float value);

  // uint32 r = 18;
  void clear_r();
  static const int kRFieldNumber = 18;
  ::google::protobuf::uint32 r() const;
  void set_r(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pbf.internal.test.Test)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > m_;
  mutable int _m_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > p_;
  ::google::protobuf::RepeatedPtrField< ::pbf::internal::test::Sub > q_;
  ::google::protobuf::RepeatedField< float > t_;
  mutable int _t_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > u_;
  mutable int _u_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr k_;
  ::google::protobuf::internal::ArenaStringPtr l_;
  ::google::protobuf::internal::ArenaStringPtr s_;
  ::pbf::internal::test::Sub* n_;
  ::pbf::internal::test::List* o_;
  ::google::protobuf::uint64 b_;
  ::google::protobuf::uint32 a_;
  ::google::protobuf::int32 c_;
  ::google::protobuf::int64 d_;
  ::google::protobuf::int64 f_;
  ::google::protobuf::int32 e_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint64 h_;
  double j_;
  float i_;
  ::google::protobuf::uint32 r_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sub

// int64 x = 1;
inline void Sub::clear_x() {
  x_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Sub::x() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Sub.x)
  return x_;
}
inline void Sub::set_x(::google::protobuf::int64 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:pbf.internal.test.Sub.x)
}

// int32 y = 2;
inline void Sub::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Sub::y() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Sub.y)
  return y_;
}
inline void Sub::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:pbf.internal.test.Sub.y)
}

// -------------------------------------------------------------------

// List

// repeated sint32 z = 1;
inline int List::z_size() const {
  return z_.size();
}
inline void List::clear_z() {
  z_.Clear();
}
inline ::google::protobuf::int32 List::z(int index) const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.List.z)
  return z_.Get(index);
}
inline void List::set_z(int index, ::google::protobuf::int32 value) {
  z_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbf.internal.test.List.z)
}
inline void List::add_z(::google::protobuf::int32 value) {
  z_.Add(value);
  // @@protoc_insertion_point(field_add:pbf.internal.test.List.z)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
List::z() const {
  // @@protoc_insertion_point(field_list:pbf.internal.test.List.z)
  return z_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
List::mutable_z() {
  // @@protoc_insertion_point(field_mutable_list:pbf.internal.test.List.z)
  return &z_;
}

// -------------------------------------------------------------------

// Test

// uint32 a = 1;
inline void Test::clear_a() {
  a_ = 0u;
}
inline ::google::protobuf::uint32 Test::a() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.a)
  return a_;
}
inline void Test::set_a(::google::protobuf::uint32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.a)
}

// uint64 b = 2;
inline void Test::clear_b() {
  b_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Test::b() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.b)
  return b_;
}
inline void Test::set_b(::google::protobuf::uint64 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.b)
}

// int32 c = 3;
inline void Test::clear_c() {
  c_ = 0;
}
inline ::google::protobuf::int32 Test::c() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.c)
  return c_;
}
inline void Test::set_c(::google::protobuf::int32 value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.c)
}

// int64 d = 4;
inline void Test::clear_d() {
  d_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Test::d() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.d)
  return d_;
}
inline void Test::set_d(::google::protobuf::int64 value) {
  
  d_ = value;
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.d)
}

// sint32 e = 5;
inline void Test::clear_e() {
  e_ = 0;
}
inline ::google::protobuf::int32 Test::e() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.e)
  return e_;
}
inline void Test::set_e(::google::protobuf::int32 value) {
  
  e_ = value;
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.e)
}

// sint64 f = 6;
inline void Test::clear_f() {
  f_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Test::f() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.f)
  return f_;
}
inline void Test::set_f(::google::protobuf::int64 value) {
  
  f_ = value;
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.f)
}

// fixed32 g = 7;
inline void Test::clear_g() {
  g_ = 0u;
}
inline ::google::protobuf::uint32 Test::g() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.g)
  return g_;
}
inline void Test::set_g(::google::protobuf::uint32 value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.g)
}

// fixed64 h = 8;
inline void Test::clear_h() {
  h_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Test::h() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.h)
  return h_;
}
inline void Test::set_h(::google::protobuf::uint64 value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.h)
}

// float i = 9;
inline void Test::clear_i() {
  i_ = 0;
}
inline float Test::i() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.i)
  return i_;
}
inline void Test::set_i(float value) {
  
  i_ = value;
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.i)
}

// double j = 10;
inline void Test::clear_j() {
  j_ = 0;
}
inline double Test::j() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.j)
  return j_;
}
inline void Test::set_j(double value) {
  
  j_ = value;
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.j)
}

// bytes k = 11;
inline void Test::clear_k() {
  k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Test::k() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.k)
  return k_.GetNoArena();
}
inline void Test::set_k(const ::std::string& value) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.k)
}
#if LANG_CXX11
inline void Test::set_k(::std::string&& value) {
  
  k_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbf.internal.test.Test.k)
}
#endif
inline void Test::set_k(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbf.internal.test.Test.k)
}
inline void Test::set_k(const void* value, size_t size) {
  
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbf.internal.test.Test.k)
}
inline ::std::string* Test::mutable_k() {
  
  // @@protoc_insertion_point(field_mutable:pbf.internal.test.Test.k)
  return k_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test::release_k() {
  // @@protoc_insertion_point(field_release:pbf.internal.test.Test.k)
  
  return k_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_k(::std::string* k) {
  if (k != NULL) {
    
  } else {
    
  }
  k_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k);
  // @@protoc_insertion_point(field_set_allocated:pbf.internal.test.Test.k)
}

// string l = 12;
inline void Test::clear_l() {
  l_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Test::l() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.l)
  return l_.GetNoArena();
}
inline void Test::set_l(const ::std::string& value) {
  
  l_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.l)
}
#if LANG_CXX11
inline void Test::set_l(::std::string&& value) {
  
  l_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbf.internal.test.Test.l)
}
#endif
inline void Test::set_l(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  l_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbf.internal.test.Test.l)
}
inline void Test::set_l(const char* value, size_t size) {
  
  l_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbf.internal.test.Test.l)
}
inline ::std::string* Test::mutable_l() {
  
  // @@protoc_insertion_point(field_mutable:pbf.internal.test.Test.l)
  return l_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test::release_l() {
  // @@protoc_insertion_point(field_release:pbf.internal.test.Test.l)
  
  return l_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_l(::std::string* l) {
  if (l != NULL) {
    
  } else {
    
  }
  l_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), l);
  // @@protoc_insertion_point(field_set_allocated:pbf.internal.test.Test.l)
}

// repeated uint64 m = 13;
inline int Test::m_size() const {
  return m_.size();
}
inline void Test::clear_m() {
  m_.Clear();
}
inline ::google::protobuf::uint64 Test::m(int index) const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.m)
  return m_.Get(index);
}
inline void Test::set_m(int index, ::google::protobuf::uint64 value) {
  m_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.m)
}
inline void Test::add_m(::google::protobuf::uint64 value) {
  m_.Add(value);
  // @@protoc_insertion_point(field_add:pbf.internal.test.Test.m)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Test::m() const {
  // @@protoc_insertion_point(field_list:pbf.internal.test.Test.m)
  return m_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Test::mutable_m() {
  // @@protoc_insertion_point(field_mutable_list:pbf.internal.test.Test.m)
  return &m_;
}

// .pbf.internal.test.Sub n = 14;
inline bool Test::has_n() const {
  return this != internal_default_instance() && n_ != NULL;
}
inline void Test::clear_n() {
  if (GetArenaNoVirtual() == NULL && n_ != NULL) {
    delete n_;
  }
  n_ = NULL;
}
inline const ::pbf::internal::test::Sub& Test::_internal_n() const {
  return *n_;
}
inline const ::pbf::internal::test::Sub& Test::n() const {
  const ::pbf::internal::test::Sub* p = n_;
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.n)
  return p != NULL ? *p : *reinterpret_cast<const ::pbf::internal::test::Sub*>(
      &::pbf::internal::test::_Sub_default_instance_);
}
inline ::pbf::internal::test::Sub* Test::release_n() {
  // @@protoc_insertion_point(field_release:pbf.internal.test.Test.n)
  
  ::pbf::internal::test::Sub* temp = n_;
  n_ = NULL;
  return temp;
}
inline ::pbf::internal::test::Sub* Test::mutable_n() {
  
  if (n_ == NULL) {
    auto* p = CreateMaybeMessage<::pbf::internal::test::Sub>(GetArenaNoVirtual());
    n_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pbf.internal.test.Test.n)
  return n_;
}
inline void Test::set_allocated_n(::pbf::internal::test::Sub* n) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete n_;
  }
  if (n) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      n = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, n, submessage_arena);
    }
    
  } else {
    
  }
  n_ = n;
  // @@protoc_insertion_point(field_set_allocated:pbf.internal.test.Test.n)
}

// .pbf.internal.test.List o = 15;
inline bool Test::has_o() const {
  return this != internal_default_instance() && o_ != NULL;
}
inline void Test::clear_o() {
  if (GetArenaNoVirtual() == NULL && o_ != NULL) {
    delete o_;
  }
  o_ = NULL;
}
inline const ::pbf::internal::test::List& Test::_internal_o() const {
  return *o_;
}
inline const ::pbf::internal::test::List& Test::o() const {
  const ::pbf::internal::test::List* p = o_;
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.o)
  return p != NULL ? *p : *reinterpret_cast<const ::pbf::internal::test::List*>(
      &::pbf::internal::test::_List_default_instance_);
}
inline ::pbf::internal::test::List* Test::release_o() {
  // @@protoc_insertion_point(field_release:pbf.internal.test.Test.o)
  
  ::pbf::internal::test::List* temp = o_;
  o_ = NULL;
  return temp;
}
inline ::pbf::internal::test::List* Test::mutable_o() {
  
  if (o_ == NULL) {
    auto* p = CreateMaybeMessage<::pbf::internal::test::List>(GetArenaNoVirtual());
    o_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pbf.internal.test.Test.o)
  return o_;
}
inline void Test::set_allocated_o(::pbf::internal::test::List* o) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete o_;
  }
  if (o) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      o = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, o, submessage_arena);
    }
    
  } else {
    
  }
  o_ = o;
  // @@protoc_insertion_point(field_set_allocated:pbf.internal.test.Test.o)
}

// repeated sint32 p = 16 [packed = false];
inline int Test::p_size() const {
  return p_.size();
}
inline void Test::clear_p() {
  p_.Clear();
}
inline ::google::protobuf::int32 Test::p(int index) const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.p)
  return p_.Get(index);
}
inline void Test::set_p(int index, ::google::protobuf::int32 value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.p)
}
inline void Test::add_p(::google::protobuf::int32 value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:pbf.internal.test.Test.p)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Test::p() const {
  // @@protoc_insertion_point(field_list:pbf.internal.test.Test.p)
  return p_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Test::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:pbf.internal.test.Test.p)
  return &p_;
}

// repeated .pbf.internal.test.Sub q = 17;
inline int Test::q_size() const {
  return q_.size();
}
inline void Test::clear_q() {
  q_.Clear();
}
inline ::pbf::internal::test::Sub* Test::mutable_q(int index) {
  // @@protoc_insertion_point(field_mutable:pbf.internal.test.Test.q)
  return q_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pbf::internal::test::Sub >*
Test::mutable_q() {
  // @@protoc_insertion_point(field_mutable_list:pbf.internal.test.Test.q)
  return &q_;
}
inline const ::pbf::internal::test::Sub& Test::q(int index) const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.q)
  return q_.Get(index);
}
inline ::pbf::internal::test::Sub* Test::add_q() {
  // @@protoc_insertion_point(field_add:pbf.internal.test.Test.q)
  return q_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pbf::internal::test::Sub >&
Test::q() const {
  // @@protoc_insertion_point(field_list:pbf.internal.test.Test.q)
  return q_;
}

// uint32 r = 18;
inline void Test::clear_r() {
  r_ = 0u;
}
inline ::google::protobuf::uint32 Test::r() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.r)
  return r_;
}
inline void Test::set_r(::google::protobuf::uint32 value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.r)
}

// bytes s = 19;
inline void Test::clear_s() {
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Test::s() const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.s)
  return s_.GetNoArena();
}
inline void Test::set_s(const ::std::string& value) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.s)
}
#if LANG_CXX11
inline void Test::set_s(::std::string&& value) {
  
  s_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbf.internal.test.Test.s)
}
#endif
inline void Test::set_s(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbf.internal.test.Test.s)
}
inline void Test::set_s(const void* value, size_t size) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbf.internal.test.Test.s)
}
inline ::std::string* Test::mutable_s() {
  
  // @@protoc_insertion_point(field_mutable:pbf.internal.test.Test.s)
  return s_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test::release_s() {
  // @@protoc_insertion_point(field_release:pbf.internal.test.Test.s)
  
  return s_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_s(::std::string* s) {
  if (s != NULL) {
    
  } else {
    
  }
  s_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:pbf.internal.test.Test.s)
}

// repeated float t = 20;
inline int Test::t_size() const {
  return t_.size();
}
inline void Test::clear_t() {
  t_.Clear();
}
inline float Test::t(int index) const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.t)
  return t_.Get(index);
}
inline void Test::set_t(int index, float value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.t)
}
inline void Test::add_t(float value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:pbf.internal.test.Test.t)
}
inline const ::google::protobuf::RepeatedField< float >&
Test::t() const {
  // @@protoc_insertion_point(field_list:pbf.internal.test.Test.t)
  return t_;
}
inline ::google::protobuf::RepeatedField< float >*
Test::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:pbf.internal.test.Test.t)
  return &t_;
}

// repeated double u = 21;
inline int Test::u_size() const {
  return u_.size();
}
inline void Test::clear_u() {
  u_.Clear();
}
inline double Test::u(int index) const {
  // @@protoc_insertion_point(field_get:pbf.internal.test.Test.u)
  return u_.Get(index);
}
inline void Test::set_u(int index, double value) {
  u_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbf.internal.test.Test.u)
}
inline void Test::add_u(double value) {
  u_.Add(value);
  // @@protoc_insertion_point(field_add:pbf.internal.test.Test.u)
}
inline const ::google::protobuf::RepeatedField< double >&
Test::u() const {
  // @@protoc_insertion_point(field_list:pbf.internal.test.Test.u)
  return u_;
}
inline ::google::protobuf::RepeatedField< double >*
Test::mutable_u() {
  // @@protoc_insertion_point(field_mutable_list:pbf.internal.test.Test.u)
  return &u_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace internal
}  // namespace pbf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_test_2eproto
